name: Binary Ready - Veracode Static Code Analysis

run-name: Binary Ready - Static Code Analysis - ${{ github.event.client_payload.repository.name }}

concurrency:
  group: ${{ github.event.client_payload.event_type }}-${{ github.event.client_payload.repository.name }}-${{ github.event.client_payload.repository.branch }}
  cancel-in-progress: true

on:
  repository_dispatch:
    types: [binary-ready-veracode-sast-pipeline-scan]

jobs:
  register:
    uses: ./.github/workflows/veracode-check-run.yml
    with:
      check_run_name: ${{ github.workflow }}
      head_sha: ${{ github.event.client_payload.sha }}
      repositroy_owner: ${{ github.event.client_payload.repository.owner }}
      repositroy_name: ${{ github.event.client_payload.repository.name }}
      event_type: ${{ github.event.client_payload.event_type }}
      github_token: ${{ github.event.client_payload.token }}
      run_id: ${{ github.run_id }}
      branch: ${{ github.event.client_payload.repository.branch }}

  validations:
    needs: register
    runs-on: ubuntu-latest
    name: Validations
    steps:
      - name: Verify Veracode API credentials
        id: verify_api_creds
        uses: veracode/github-actions-integration-helper@v0.1.6
        with:
          action: validateVeracodeApiCreds
          token: ${{ github.event.client_payload.token }}
          vid: ${{ secrets.VERACODE_API_ID }}
          vkey: ${{ secrets.VERACODE_API_KEY }}
          appname: ${{ github.event.client_payload.user_config.profile_name }}
          source_repository: ${{ github.event.client_payload.repository.full_name }}
          check_run_id: ${{ needs.register.outputs.run_id }}

      - name: Verify Policy name
        id: verify_policy_name
        if: success()
        uses: veracode/github-actions-integration-helper@v0.1.6
        with:
          action: validatePolicyName
          token: ${{ github.event.client_payload.token }}
          vid: ${{ secrets.VERACODE_API_ID }}
          vkey: ${{ secrets.VERACODE_API_KEY }}
          appname: ${{ github.event.client_payload.user_config.profile_name }}
          source_repository: ${{ github.event.client_payload.repository.full_name }}
          check_run_id: ${{ needs.register.outputs.run_id }}
          policyname: ${{ github.event.client_payload.policy_name }}
          path: ${{ github.event.client_payload.annotationObj.path }}
          start_line: ${{ github.event.client_payload.annotationObj.start_line }}
          end_line: ${{ github.event.client_payload.annotationObj.end_line }}
          break_build_invalid_policy: ${{github.event.client_payload.break_build_invalid_policy }}

  prepare_pipeline_scan:
    runs-on: ubuntu-latest
    needs: [register, validations]
    name: prepare pipeline scan
    outputs:
      matrix_files: ${{ steps.get-files.outputs.matrix_files }} 

    steps:
      - name: Download artifact
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ github.event.client_payload.token }}
          repository: ${{ github.event.client_payload.repository.full_name }}
          run-id: ${{ github.event.client_payload.run_id }}
          name: ${{ github.event.client_payload.repository.artifact_file }}
          path: ./veracode_artifact_directory

      - name: Get list of files for matrix
        id: get-files
        run: |
          files=$(ls -1 veracode_artifact_directory | jq -R . | jq -s .)
          echo "Files for matrix: $files"
          files=$(echo $files | jq -c .)  # Compact the JSON array to a single line
          echo "matrix_files=$files" >> $GITHUB_OUTPUT
        shell: bash

  pipeline_scan:
    runs-on: ubuntu-latest
    needs: [register, validations, prepare_pipeline_scan]
    strategy:
      matrix:
        file: ${{fromJson(needs.prepare_pipeline_scan.outputs.matrix_files)}}

    steps:
      - name: checkout repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.client_payload.repository.owner }}/${{ github.event.client_payload.repository.name }}
          ref: ${{ github.event.client_payload.user_config.ref }}
          token: ${{ github.event.client_payload.token }}
        
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ github.event.client_payload.token }}
          repository: ${{ github.event.client_payload.repository.full_name }}
          run-id: ${{ github.event.client_payload.run_id }}
          name: ${{ github.event.client_payload.repository.artifact_file }}
          path: ./veracode_artifact_directory

      - name: Debug Matrix Content
        run: |
          echo "Raw matrix files: ${{ needs.prepare_pipeline_scan.outputs.matrix_files }}"
          echo "Current Matrix: ${{ matrix }}"
          echo "Current File: ${{ matrix.file }}"

      # run the pipeline scan action
      - name: Veracode Pipeline-Scan
        if: always()
        id: pipeline-scan
        uses: veracode/Veracode-pipeline-scan-action@v1.0.17
        with:
          vid: ${{ secrets.VERACODE_API_ID }}
          vkey: ${{ secrets.VERACODE_API_KEY }}
          veracode_policy_name: ${{ github.event.client_payload.policy_name }}
          file: ./veracode_artifact_directory/${{ matrix.file }}
          fail_build: ${{ github.event.client_payload.user_config.break_build_policy_findings }}
          summary_output: true
          summary_output_file: ${{ strategy.job-index }}-results.txt
          json_output: true
          json_output_file: ${{ strategy.job-index }}-results.json
          filtered_json_output_file: ${{ strategy.job-index }}-filtered_results.json
          artifact_name: ${{ matrix.file }}
          debug: 1
    
      - name: Veracode Pipeline Results
        if: always()
        id: prepare-results
        uses: veracode/github-actions-integration-helper@v0.1.6
        with:
          action: 'preparePipelineResults'
          token: ${{ github.event.client_payload.token }}
          check_run_id: ${{ needs.register.outputs.run_id }}
          vid: ${{ secrets.VERACODE_API_ID }}
          vkey: ${{ secrets.VERACODE_API_KEY }}
          appname: ${{ github.event.client_payload.user_config.profile_name }}
          source_repository: ${{ github.event.client_payload.repository.full_name }}
          fail_checks_on_policy: ${{ github.event.client_payload.user_config.break_build_policy_findings }}
          fail_checks_on_error: ${{ github.event.client_payload.user_config.break_build_on_error }} 
          filter_mitigated_flaws: ${{ github.event.client_payload.user_config.filter_mitigated_flaws }}
          filtered_results_file: ${{ strategy.job-index }}-filtered_results.json

      - name: Convert pipeline scan output to SARIF format
        if: ${{ github.event.client_payload.user_config.create_code_scanning_alert && always() }}
        uses: Veracode/veracode-pipeline-scan-results-to-sarif@v2.0.4
        with:
          pipeline-results-json: mitigated_${{ strategy.job-index }}-filtered_results.json
          output-results-sarif: veracode-results.sarif
          repo_owner: ${{ github.event.client_payload.repository.owner }}
          repo_name: ${{ github.event.client_payload.repository.name }}
          commitSHA: ${{ github.event.client_payload.sha }}
          ref: ${{ github.event.client_payload.user_config.ref }}
          githubToken: ${{ github.event.client_payload.token }}

      - name: Create flaws as issues
        if: ${{ github.event.client_payload.user_config.create_issue && always() }}
        uses: veracode/veracode-flaws-to-issues@v2.2.25
        with:
          scan-results-json: mitigated_${{ strategy.job-index }}-filtered_results.json
          repo_owner: ${{ github.event.client_payload.repository.owner }}
          github-token: ${{ github.event.client_payload.token }}
          repo_name: ${{ github.event.client_payload.repository.name }}
          commitHash:  ${{ github.event.client_payload.sha }}

  update-checks-status:
    runs-on: ubuntu-latest
    needs: pipeline_scan
    if: always()
    steps:
      - name: Update cxheck
        id: update_check_status
        shell: bash
        run: |
          # Convert JSON string to a proper format for jq processing
          echo '${{ toJSON(needs) }}' | jq -c 'to_entries[]' | while read -r job; do
            status=$(echo "$job" | jq -r '.value.result')
            if [ "$status" = "success" ]; then
              echo "Job scuccess no need to update"
              success_count=$((success_count + 1))
            elif [ "$status" = "failure" ]; then
              echo "Jobs failed - need checks update"
              echo '{"status": "completed", "conclusion": "failure"}' > payload.txt
              curl -X PATCH \
                -H "Authorization: Bearer ${{ github.event.client_payload.token }}" \
                -H "Accept: application/vnd.github+json" \
                https://api.github.com/repos/${{ github.event.client_payload.repository.owner }}/${{ github.event.client_payload.repository.name }}/check-runs/${{ needs.register.outputs.run_id }} \
                -d @"payload.txt"
            fi
          done